[project]
name = "warehouse-management"
version = "0.1.0"
description = ""
authors = [
    {name = "Aleksander Moiseenko",email = "alex.mois.developer@gmail.com"}
]
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "sqlalchemy==2.0.39",
    "pydantic-settings==2.8.1",
    "dependency-injector==4.46.0",
    "pydantic==2.10.6"
]

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
package-mode = false

[tool.poetry.group.dev.dependencies]
pre-commit = "==4.1.0"
ruff = "==0.9.10"
mypy = "==1.15.0"

[tool.poetry.group.test.dependencies]
pytest = "==8.3.5"
pytest-cov = "==6.0.0"
pytest-mock = "==3.14.0"
pytest-docker = "==3.2.0"

[tool.mypy]
# mypy_path = "src/nginx_log_analyzer"                     # Указывает корневую папку исходного кода
files = ["**/*/*.py"]               # Разделенный запятыми список путей, которые должны быть проверены mypy если, ни один из них не указан в командной строке..
python_version = "3.13"             # Обеспечивает совместимость с Python 3.12.
exclude = [                         # Пропускает папки.
    "^tests/.*/__init__\\.py$",
]
cache_dir = ".mypy_cache"           # Кэширование результатов для ускорения последующих запусков.
strict = true                       # Включает строгий режим (все основные проверки безопасности).
ignore_missing_imports = true       # Подавляет сообщения об ошибках импорта, которые не могут быть разрешены.
disallow_incomplete_defs = true     # Запрещает определять функции с неполными аннотациями типов, но при этом допускает полностью неаннотированные определения.
disallow_untyped_calls = true       # Запрещает вызов функций без аннотаций типов из функций с аннотациями типов.
disallow_untyped_decorators = false # Сообщает об ошибке, когда функция с аннотациями типов украшается декоратором без аннотаций.
disallow_untyped_defs = true        # Запрещает определять функции без аннотаций типов или с неполными аннотациями типов.
disallow_any_generics = true        # Запрещает использование общих типов, в которых не указаны явные параметры типа.
disallow_subclassing_any = true     # Запрещает подклассифицировать значение типа Any.
warn_no_return = true               # Показывает ошибки, связанные с отсутствием операторов возврата на некоторых путях выполнения.
warn_redundant_casts = true         # Предупреждает, если cast() является избыточным.
warn_return_any = true              # Выдает предупреждение при возврате значения с типом Any из функции, объявленной с возвращаемым типом не Any.
warn_unreachable = true             # Выводит предупреждение, когда встречается код, признанный недоступным или избыточным после выполнения анализа типов.
warn_unused_configs = true          # Предупреждает, если какой-либо параметр конфигурации mypy не используется.
warn_unused_ignores = true          # Предупреждает, если # type: ignore является ненужным.
show_error_codes = true             # Отображение подробных кодов ошибок в выходных данных.
pretty = true                       # Красивое оформление сообщений об ошибках.
implicit_optional = false           # Запрещает неявные опциональные типы.
check_untyped_defs = true           # Проверяет внутреннюю часть функций без аннотаций типов.
ignore_errors = false               # Игнорирует все нефатальные ошибки.
implicit_reexport = false           # Позволяет другим модулям импортировать в модуль значения рассматриваются как экспортированные.
local_partial_types = true          # Запрещает выводить тип переменной None из двух присваиваний в разных диапазонах.
strict_equality = true              # Запрещает проверки на равенство, идентичность и контейнеры между непересекающимися типами.
strict_optional = true              # Отключает проверку опциональных типов и значений None.
follow_imports = "silent"           # Настраивает, как mypy будет следовать за импортированными модулями, которые не были явно переданы через командную строку.
allow_redefinition  = false         # Позволяет переопределять переменные с произвольным типом, если переопределение находится в том же блоке.
extra_checks = false                # Включает дополнительные проверки, которые технически правильны, но могут быть непрактичны в реальном коде.

